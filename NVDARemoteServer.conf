### NVDARemoteServer configuration file
# This file controls some server parameters, such as network interface used and port
# See NVDARemoteServer.conf (5) manual page for more details
# Blank lines or lines starting with # are ignored
# Don't add comments in the same line after a setting
# The configuration has the following format: option=value
# Don't add spaces between option and value, or at the beginning / ending of the line

### Listening interface
# By default, the server listens on all available network interfaces.
# You can change this setting uncommenting one of the following examples, or adding your own value
 # In some platforms, interface setting will not work if interface6 is not configured to bind to a specific address.
# listen only on localhost
#interface=127.0.0.1
# Listen on ip address 192.168.1.2
#interface=192.168.1.2
# For IPV6 addresses, use the interface6 option.
# Listen only on localhost
#interface6=::1

### Listening port
# By default, this server only accepts connections on port 6837. You can change the default port here.
# Check that there are no services listening on the chosen port
#port=6837
#port=8080
#port=443
# You can have different ports for IPV4 and IPV6. By default, IPV6 will use the port setting above, but you can change it.
#port6=6837
#port6=6838

### Log file location
# On Unix-based systems, the server saves the log to /var/log/NVDARemoteServer.log. On Windows, the log file is saved in the same location as the server executable.
#logfile=/var/log/NVDARemoteServer.log
#logfile=/home/john/logs/nvda.log
#on Windows
#logfile=C:\users\john\Documents\NVDARemoteServer.log

### Pid File location
# If the server is running in daemon mode, it will store a file with the process id somewhere in your file system.
# By default, the pidfile is stored in /var/run/NVDARemoteServer.pid
# If you change pidfile in the configuration file and use the server as a system daemon, update the pidfile variable in the service units for the status command to work properly.
#pidfile=/var/run/NVDARemoteServer.pid
#pidfile=/home/user/run/NVDARemoteServer.pid

### Log level
# This setting allows configuring the log output. It requires a value between 0 and 4, where:
# 0: log only initial messages, errors and warnings
# 1: log connection events. This includes clients source ip addresses.
# 2: log extra debugging information: socket creation process, variable initialization, ...
# 3: log all events which include a channel password. Use with caution, never in production environments! This can cause a huge security risk for your clients!
# 4: log all the above information, as well as the precise protocol sent and received by the server. Never use this on production environments, you will expose more about the internals of the server than should be known. This is intended for advanced use only, and is not intended for use over extended sessions.
# Default value: 2
# examples:
#loglevel=0
#loglevel=3
#loglevel=1

### SSL private key
# This setting specifies the path to a pem-encoded private key for ssl connections.
# The pem file must contain  the private key without passphrase encryption
# This setting is optional and has no default value
# Example:
#keyfile=/etc/apache2/ssl/privkey.pem
#keyfile=C:\users\john\certificates\server.key

### SSL certificate
# This setting specifies the path to a pem-encoded, concatenated private key and certificate for ssl connections.
# The pem file must contain firstly the private key without passphrase encryption, followed by an unix-style line ending and the certificate. Additional ca and root certificates can be added below this content.
# If the file contains only a certificate or a certificate chain, you must configure keyfile setting explained above.
# By default, use server.pem located in the same path as server.py.
# Example:
#certfile=/etc/apache2/ssl/certificate.pem
#certfile=C:\users\john\certificates\server.pem

### Message of the day
# This is the message displayed to all clients which join a channel
# If you collect user data, this is a good place to specify an URL to your privacy policy, if available
# The message must be written in a single line. Multiline support is not available yet
# By default no message is displayed
# Example:
#motd=Hello, welcome to my relay server
#motd=Hello, welcome to example remote server. By creating a session, you agree to our privacy policy, located at https://example.org/privacy. Read it carefully before proceeding.

### Force MOTD display for every connection
# The message of the day can be displayed once (only for first-time clients) or each time a client joins a channel
# Possible values for this setting: 0=False, other integer values mean True. Defaults to False (do not force display).
# Example:
#motd_force_display=0
#motd_force_display=1

### Include tracebacks when logging exceptions
# Tracebacks are helpful when debugging exceptions, but can be quite anoying on some scenarios, such as production servers.
# You can control wether tracebacks are displayed in the log file or the console using this setting.
# If set to 0, tracebacks will be disabled. If set to 1, tracebacks will be displayed for each server exception.
# Example:
#includeTracebacks=0
#includeTracebacks=1

### Limit incoming messages length
# Some providers limit or bill outgoing server traffic. If large messages are received from a client and are relayed to all clients in the same channel, this traffic may increase significantly in a short period of time.
# This setting allows defining, in characters, the maximum allowed length for incoming messages.
 # Note that characters may have different lengths depending on the Python version and encoding used.
# If set to 0 or lower, there is no limit
# Examples:
#allowedMessageLength=0
#allowedMessageLength=10240000

### Socket timeout
# This setting specifies the maximum time, in seconds, that a client can be connected without negotiating a SSL connection before an exception is raised.
# Default value: 5.0 (5 seconds). Only same or greather values are supported.
# Examples:
#timeout=5.0
#timeout=10.0
